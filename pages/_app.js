import '../styles/globals.css'
// import type { AppProps } from 'next/app'
import React from 'react'
import { ChakraProvider, extendTheme } from '@chakra-ui/react'
import Head from 'next/head'
import Navbar from '@components/Navbar'
import Footer from '@components/Footer'
import { useEffect, useState } from 'react'

const theme = extendTheme({
  styles: {
    global: {
      'html,body': {
        backgroundColor: '#000113',
      },
      '*': {
        fontFamily: 'DM Sans',
        color: 'white',
        backgroundColor: 'transparent',
      },
      button: {
        backgroundColor: 'transparent !important',
        border: '1px solid gray',
        _hover: {
          border: '1px solid lightgray',
        },
      },
    },
  },
})
const { ethers } = require('ethers')

export const MyAppContext = React.createContext({
  account: undefined,
  setAccount: undefined,
  contract: undefined,
  setContract: undefined,
  provider: undefined,
  setProvider: undefined,
  signer: undefined,
  setSigner: undefined,
  allTasks: undefined,
  setAllTasks: undefined,
  selectedTask: undefined,
  setSelectedTask: undefined,
  isQuestSuccessfullycompleted: undefined,
  setIsQuestSuccessfullycompleted: undefined,
  userUD: undefined,
  setUserUD: undefined,
  currentAccountUd: undefined,
  setCurrentAccountUd: undefined,
  balance: undefined,
  setBalance: undefined,
  chainId: undefined,
  setChainId: undefined,
})

export default function App({ Component, pageProps, router }) {
  const [mounted, setMounted] = useState(false)
  const [currentAccountUd, setCurrentAccountUd] = useState('')

  const [account, x] = useState('')
  const [contract, setContract] = useState('')
  const [provider, setProvider] = useState('')
  const [signer, setSigner] = useState('')
  const [allTasks, setAllTasks] = useState('')
  const [selectedTask, setSelectedTask] = useState('')
  const [userUD, setUserUD] = useState('')
  const [
    isQuestSuccessfullycompleted,
    setIsQuestSuccessfullycompleted,
  ] = useState(false)

  useEffect(() => setMounted(true), [])
  if (!mounted) return null
  return (
    <ChakraProvider theme={theme}>
      {/* <WagmiProvider client={WagmiClient}> */}
      <MyAppContext.Provider
        value={{
          account,
          setAccount,
          contract,
          setContract,
          provider,
          setProvider,
          signer,
          setSigner,
          allTasks,
          setAllTasks,
          selectedTask,
          setSelectedTask,
          isQuestSuccessfullycompleted,
          setIsQuestSuccessfullycompleted,
          userUD,
          setUserUD,
          currentAccountUd,
          setCurrentAccountUd,
        }}
      >
        <Head>
          <title>Learning rewards: Tasks</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <Navbar account={account} setAccount={setAccount} userUD={userUD} />
        <Component {...pageProps} key={router.route} />
        <Footer />
      </MyAppContext.Provider>
      {/* </WagmiProvider> */}
    </ChakraProvider>
  )
}
